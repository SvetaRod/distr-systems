version: "3"

services:
  db:
    image: postgres
    environment:
      POSTGRES_DB: "mydb"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"
    ports:
      - 5435:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - my-network
  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - 15672:15672
    networks:
      - my-network
  my-app-1:
    image: my-app:1.0
    container_name: my-app-1
    build:
      context: ./quarkus-app
      dockerfile: src/main/docker/dockerfile.jvm
    ports:
      - 8081:8080
    depends_on:
      - db
      - rabbitmq
    networks:
      - my-network
  my-app-2:
    image: my-app:1.0
    container_name: my-app-2
    build:
      context: ./quarkus-app
      dockerfile: src/main/docker/dockerfile.jvm
    ports:
      - 8082:8080
    depends_on:
      - db
      - rabbitmq
    networks:
      - my-network
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - my-network
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - 3000:3000
    networks:
      - my-network

  elasticsearch:
    image: elasticsearch:8.13.4
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      discovery.type: "single-node"
      cluster.routing.allocation.disk.threshold_enabled: false
      xpack.security.enabled: false
    networks:
      - my-network

  logstash:
    image: logstash:8.13.4
    container_name: logstash
    ports:
      - "5057:5057"
      - "5000:5000"
      - "9600:9600"
    environment:
      XPACK_MONITORING_ENABLED: "false"
    volumes:
      - ./logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./logstash/pipelines/logstash.conf:/usr/share/logstash/config/pipelines/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - my-network

  kibana:
    image: kibana:8.13.4
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      monitoring.ui.container.elasticsearch.enabled: true
      elasticsearch.hosts: "http://elasticsearch:9200"
    networks:
      - my-network

  nginx:
    image: nginx
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    networks:
      - my-network

  consul:
    image: consul:1.9.5
    container_name: consul
    ports:
      - 8500:8500
      - 8600:8600
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    networks:
      - my-network

  registrator:
    image: gliderlabs/registrator:master
    container_name: registrator
    restart: unless-stopped
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
    command: consul://consul:8500
    depends_on:
      - consul
    networks:
      - my-network

networks:
  my-network:
    name: my-network
volumes:
  db-data:
    name: db-data
  prometheus-data:
    name: prometheus-data

